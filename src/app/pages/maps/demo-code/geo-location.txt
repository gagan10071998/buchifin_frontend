import React from 'react';
import canUseDOM from 'can-use-dom';
import raf from 'raf';
import Typography from "@mui/material/Typography";
import {Circle, GoogleMap, InfoWindow, useLoadScript} from "@react-google-maps/api";
import JumboDemoCard from "@jumbo/components/JumboDemoCard";
import {useTranslation} from "react-i18next";
import code from './demo-code/geo-location.txt';

const geoLocationExample =
    canUseDOM && navigator.geolocation
        ? navigator.geolocation
        : {
            getCurrentPosition(success, failure) {
                failure(`Your browser doesn't support geolocation.`);
            },
        };

const GeoLocation = () => {
    const {t} = useTranslation();
    const [center, setCenter] = React.useState(null);
    const [content, setContent] = React.useState(null);
    const [radius, setRadius] = React.useState(6000);

    const {isLoaded} = useLoadScript({
        googleMapsApiKey: "AIzaSyCJM0a8oSaRMwxthozENQg1euRI51aNXJQ",
        libraries: ["visualization"]
    });

    React.useEffect(() => {
        let isUnmounted = false;
        const tick = () => {
            if (isUnmounted) {
                return;
            }
            setRadius(Math.max(radius - 20, 0));

            if (radius > 200) {
                raf(tick);
            }
        };
        geoLocationExample.getCurrentPosition(
            position => {
                if (isUnmounted) {
                    return;
                }
                setCenter({
                    lat: position.coords.latitude,
                    lng: position.coords.longitude,
                });
                setContent(`Location found using HTML5.`);
                raf(tick);
            },
            reason => {
                if (isUnmounted) {
                    return;
                }

                setCenter({
                    lat: 60,
                    lng: 105,
                });
                setContent(`Error: The Geolocation service failed (${reason}).`);
            },
        );
        return () => {
            isUnmounted = true;
        };
    }, []);

    return (
        <React.Fragment>
            <Typography variant={"h1"} mb={3}>{t('pages.title.mapGeoLocation')}</Typography>
            <JumboDemoCard demoCode={code} wrapperSx={{pt: 0, backgroundColor: 'background.paper'}}>
                {
                    isLoaded &&
                    <GoogleMap
                        mapContainerStyle={{width: '100%', height: "400px"}}
                        center={center}
                        zoom={10}
                    >
                        {
                            center && (
                                <InfoWindow position={center}>
                                    <div>{content}</div>
                                </InfoWindow>
                            )
                        }
                        {
                            center && (
                                <Circle
                                    center={center}
                                    radius={radius}
                                    options={{
                                        fillColor: 'red',
                                        fillOpacity: 0.4,
                                        strokeColor: 'white',
                                        strokeOpacity: 1,
                                        strokeWeight: 1,
                                    }}
                                />
                            )
                        }
                    </GoogleMap>
                }
            </JumboDemoCard>
        </React.Fragment>

    );
};

export default GeoLocation;
